# version: '3'

# services:
#   db:
#     image: postgres:13
#     volumes:
#       - postgres-data:/var/lib/postgresql/data/
#       - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
#     env_file:
#       - .env
#     environment:
#       POSTGRES_HOST : "db"
#       POSTGRES_PORT : "5432"
#       POSTGRES_NAME : "gymbro"
#       POSTGRES_USER : "askar"
#       POSTGRES_PASSWORD : "salom123"
#       POSTGRES_HOST_AUTH_METHOD : "trust"
#   gym:
#     restart: always
#     build: ./
#     expose:
#       - "8000"
#     ports:
#       - "8000:8000"
#     volumes:
#       - gym-django:/usr/src/app
#       - gym-static:/usr/src/app/project/static
#     env_file: .env
#     depends_on:
#       - db
#     command: gunicorn project.wsgi:application -w 2 -b :8000 && python manage.py migrate

# volumes:
#   gym-django:
#   gym-static:
#   postgres-data:


version: '3.8'

services:
  web_service:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    env_file: .env
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8001:8001"
    depends_on:
      - postgres

  postgres:
    image: postgres:15-alpine
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  redis:
    image: redis:6.2-alpine
    env_file:
      - .env
    volumes:
      - redis_data:/data

  nginx:
    build:
      context: .
      dockerfile: ./compose/nginx/Dockerfile
    ports:
      - '8000:80'
      - '443:443'
    depends_on:
      - web_service
    logging:
      options:
        max-size: '10m'
        max-file: '3'
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media

volumes:
  media_volume:
  static_volume:
  postgres_data:
  redis_data:
